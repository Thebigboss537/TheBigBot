<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>QueensLeague Overlay</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap");

      body {
        margin: 0;
        padding: 0;
        font-family: "Roboto", sans-serif;
        color: #ffffff;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        background-color: transparent;
      }

      .container {
        position: relative;
        width: 100%;
        height: 100%;
      }

      .prediction {
        position: absolute;
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: rgba(40, 44, 52, 0.9);
        border: 2px solid #ff69b4;
        border-radius: 10px;
        padding: 8px;
        text-align: center;
        width: 360px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
      }

      .score-container {
        display: flex;
        justify-content: space-between;
        width: 100%;
        align-items: center;
        background: linear-gradient(to right, #2c2c2c, #3a3a3a);
        border-radius: 5px;
        padding: 2px;
        border-left: 3px solid #ff69b4;
        border-right: 3px solid #5f33ff;
        margin-bottom: 4px;
      }

      .team {
        display: flex;
        align-items: center;
        flex: 1;
      }

      .team.home { justify-content: flex-start; }
      .team.away { justify-content: flex-end; }

      .team img {
        width: 28px;
        height: 28px;
      }

      .team.home img { margin-right: 5px; }
      .team.away img { margin-left: 5px; order: 1; }

      .team-name {
        font-size: 1.1rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px;
        font-weight: bold;
        color: #e0e0e0;
      }

      .score {
        font-size: 1.2rem;
        margin: 0 10px;
        color: #ffd700;
        font-weight: bold;
        flex-shrink: 0;
      }

      .count {
        font-size: 1.2rem;
        color: #ffb3da;
        margin-top: 4px;
        font-weight: 500;
      }

      .prediction.hidden { display: none; }
    </style>
  </head>
  <body>
    <div class="container" id="predictionsContainer">
      <!-- Las predicciones se llenarán aquí dinámicamente -->
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      const teamLogos = {
        "homeTeam":
          "https://queensleague.pro/_ipx/s_176x176/kama/production/team/483113209.png",
        "awayTeam":
          "https://queensleague.pro/_ipx/s_176x176/kama/production/team/203289617.png",
      };

      function createPredictionElement(prediction, index) {
        const predictionDiv = document.createElement("div");
        predictionDiv.className = "prediction";
        predictionDiv.id = `prediction-${index}`;

        const scoreContainer = document.createElement("div");
        scoreContainer.className = "score-container";

        // Equipo local
        const homeTeamDiv = document.createElement("div");
        homeTeamDiv.className = "team home";

        const homeLogo = document.createElement("img");
        homeLogo.src = teamLogos["homeTeam"];
        homeTeamDiv.appendChild(homeLogo);

        const homeNameDiv = document.createElement("div");
        homeNameDiv.className = "team-name";
        homeNameDiv.textContent = "Real Titán FC";
        homeTeamDiv.appendChild(homeNameDiv);

        scoreContainer.appendChild(homeTeamDiv);

        // Puntuación
        const scoreDiv = document.createElement("div");
        scoreDiv.className = "score";
        scoreDiv.textContent = `${prediction ? prediction.homeScore : "?"} - ${
          prediction ? prediction.awayScore : "?"
        }`;
        scoreContainer.appendChild(scoreDiv);

        // Equipo visitante
        const awayTeamDiv = document.createElement("div");
        awayTeamDiv.className = "team away";

        const awayNameDiv = document.createElement("div");
        awayNameDiv.className = "team-name";
        awayNameDiv.textContent = "Las Aliens FC";
        awayTeamDiv.appendChild(awayNameDiv);

        const awayLogo = document.createElement("img");
        awayLogo.src = teamLogos["awayTeam"];
        awayTeamDiv.appendChild(awayLogo);

        scoreContainer.appendChild(awayTeamDiv);

        predictionDiv.appendChild(scoreContainer);

        // Contador de votos
        const countDiv = document.createElement("div");
        countDiv.className = "count";
        countDiv.textContent = `Votos: ${prediction ? prediction.count : 0}`;
        predictionDiv.appendChild(countDiv);

        return predictionDiv;
      }

      function updatePredictionPositionsAndVisibility(positionsAndVisibility) {
        positionsAndVisibility.forEach((item, index) => {
          const predictionElement = document.getElementById(
            `prediction-${index}`
          );
          if (predictionElement) {
            predictionElement.style.transform = `translate(${item.x}px, ${item.y}px)`;
            predictionElement.classList.toggle("hidden", !item.visible);
          }
        });
      }

      function updatePredictions(predictions) {
        const container = document.getElementById("predictionsContainer");
        container.innerHTML = ""; // Limpiar las predicciones anteriores

        // Crear 5 predicciones o placeholders
        for (let i = 0; i < 5; i++) {
          const predictionElement = createPredictionElement(predictions[i], i);
          container.appendChild(predictionElement);
        }
      }

      socket.on('connect', () => {
        console.log('Overlay socket connected');
        socket.emit('joinRoom', 'queensleague');
      });

      socket.on('update', (data) => {
        console.log('Received update:', data);
        if (data.type === 'queensleague') {
          updatePredictions(data.predictions);
          updatePredictionPositionsAndVisibility(data.positionsAndVisibility);
        }
      });

      socket.on("updatePositionsAndVisibility", updatePredictionPositionsAndVisibility);

      socket.on('reloadOverlay', function() {
        console.log('Reloading overlay');
        window.location.reload();
      });

      // Manejar la desconexión
      window.addEventListener('beforeunload', () => {
        socket.emit('leaveRoom', 'queensleague');
      });
    </script>
  </body>
</html>